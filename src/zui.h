#include <stdbool.h>

#ifndef TYPES_INCLUDED
#define TYPES_INCLUDED
typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned long u32;
typedef unsigned long long u64;

typedef char i8;
typedef short i16;
typedef int i32;
typedef long long i64;

typedef float f32;
typedef double f64;
#endif TYPES_INCLUDED

#ifndef ZUI_INCLUDED
#define ZUI_INCLUDED

#ifdef __cplusplus 
extern "C" {
#endif

#define Z_NONE -3
#define Z_AUTO -2
#define Z_FILL -1
#define ZV_AUTO (zvec2) { Z_AUTO, Z_AUTO }
#define ZV_FILL (zvec2) { Z_FILL, Z_FILL }

typedef struct zcolor { u8 r, g, b, a; } zcolor;
typedef struct zvec2 { union { struct { u16 x, y; }; u16 e[2]; }; } zvec2;
typedef struct zrect { union { struct { u16 x, y, w, h; }; u16 e[4]; }; } zrect;
typedef struct zfont {
    i32 id;
    i32 bytes;
    zvec2 (*text_size)(struct zfont *font, char *str, i32 len);
} zfont;

enum ZUI_KEYS {
    ZK_L_SHIFT = 1 << 0,
    ZK_R_SHIFT = 1 << 1,
    ZK_SHIFT = ZK_L_SHIFT | ZK_R_SHIFT,
    ZK_L_CTRL = 1 << 2,
    ZK_R_CTRL = 1 << 3,
    ZK_CTRL = ZK_L_CTRL | ZK_R_CTRL,
    ZK_L_ALT = 1 << 4,
    ZK_R_ALT = 1 << 5,
    ZK_ALT = ZK_L_ALT | ZK_R_ALT,
    ZK_SUPER = 1 << 6,
#if defined(_WIN32)
    ZK_SHORTCUT = ZK_CTRL,
#elif defined(__APPLE__) && defined(__MACH__)
    ZK_SHORTCUT = ZK_SUPER,
#endif
};

enum ZUI_MOUSE {
    ZM_LEFT_CLICK = 1,
    ZM_RIGHT_CLICK = 2,
    ZM_MIDDLE_CLICK = 4
};
enum ZUI_UI_CMDS {
    ZU_JUSTIFY = 0,
    ZU_SET_SIZE
};
enum ZUI_WIDGETS {
	ZW_FIRST = ZU_SET_SIZE + 1,
	ZW_BLANK = ZW_FIRST,
	ZW_BOX,
	ZW_POPUP,
	ZW_LABEL,
	ZW_ROW,
	ZW_COL,
	ZW_BTN,
	ZW_CHECK,
	ZW_TEXT,
	ZW_COMBO,
	ZW_GRID
};

enum ZUI_JUSTIFY {
	ZJ_CENTER = 0,
	ZJ_LEFT = 1,
	ZJ_RIGHT = 2,
	ZJ_UP = 4,
	ZJ_DOWN = 8
};

enum ZUI_FLAGS {
	// A container that has children
	ZF_PARENT = 16,
	// pressing tab can focus to this element
	ZF_TABBABLE = 32
};

//typedef struct zcmd { i32 id, bytes; } zcmd;
//typedef struct zcmd_clip { zcmd header; zrect cliprect; } zcmd_clip;
//typedef struct zcmd_draw_rect { zcmd header; i32 zindex; zrect rect; zcolor color; } zcmd_draw_rect;
//typedef struct zcmd_draw_text { zcmd header; i32 zindex; zfont *font; zvec2 coord; char *text; i32 len; zcolor color; } zcmd_draw_text;

typedef struct zcmd { u16 id, bytes; } zcmd;

// commands generated by the server
enum ZUI_SERVER_CMDS {
	ZSCMD_CLIP,
	ZSCMD_RECT,
	ZSCMD_TEXT,
	ZSCMD_COPY,
	ZSCMD_FONT,
	ZSCMD_TEXT_SZ
};

typedef struct zscmd_clip { zcmd header; zrect rect; } zscmd_clip;                                          // set clip rect
typedef struct zscmd_rect { zcmd header; zrect rect; zcolor color; } zscmd_rect;                            // draw rect
typedef struct zscmd_text { zcmd header; zvec2 pos;  zcolor color; u16 font_id; char text[0]; } zscmd_text; // draw text
typedef struct zscmd_copy { zcmd header; char text[0]; } zscmd_copy;                                        // send copied text to client
typedef struct zscmd_font { zcmd header; u16 font_id; u16 size; char family[0]; } zscmd_font;               // register font
typedef struct zscmd_text_sz { zcmd header; u16 font_id; char text[0]; } zscmd_text_sz;                     // request text size
typedef union zscmd {
	zcmd       base;
	zscmd_clip clip;
	zscmd_rect rect;
	zscmd_text text;
	zscmd_copy copy;
	zscmd_font font;
	zscmd_text_sz text_sz;
} zscmd;

// commands generated by the client
enum ZUI_CLIENT_CMDS {
	ZCCMD_MOUSE,
	ZCCMD_KEYS,
	ZCCMD_TEXT_SZ,
	ZCCMD_WIN
};

typedef struct zccmd_mouse { zcmd header; zvec2 pos; u16 state; } zccmd_mouse;               // mouse movement / state
typedef struct zccmd_keys { zcmd header; char text[0]; } zccmd_keys;                         // key presses
typedef struct zccmd_text_sz { zcmd header; zvec2 sz; } zccmd_text_sz;                       // sent in response to server requests
typedef struct zccmd_win { zcmd header; zvec2 sz; } zccmd_win;                               // new window size
typedef union zccmd {
	zcmd          base;
	zccmd_mouse   mouse;
	zccmd_keys    keys;
	zccmd_text_sz text_sz;
	zccmd_win     win;
} zccmd;

typedef struct zcmd_widget { u16 id, bytes; i32 next, zindex, flags; zrect bounds; zrect used; } zcmd_widget;

typedef struct zs_text { i32 flags, index, ofs, selection; } zs_text;
typedef struct zcmd_text { zcmd_widget _; char *buffer; i32 len; zs_text *state; } zcmd_text;
typedef struct zcmd_btn { zcmd_widget _; u8 *state; } zcmd_btn;
typedef struct zcmd_check { zcmd_widget _; u8 *state; } zcmd_check;
typedef struct zcmd_combo { zcmd_widget _; char *tooltip, *csoptions; i32 *state; } zcmd_combo;
typedef struct zcmd_label { zcmd_widget _; char *text;  i32 len; } zcmd_label;
typedef struct zcmd_box { zcmd_widget _; } zcmd_box;
typedef struct zcmd_popup { zcmd_widget _; } zcmd_popup;
typedef struct zcmd_layout { zcmd_widget _; i32 count; float data[1]; } zcmd_layout;
typedef struct zcmd_grid { zcmd_widget _; u8 rows, cols, padx, pady; float data[1]; } zcmd_grid;

typedef void(*zui_server_fn)(zscmd *cmd, void *user_data);
typedef void(*zui_client_fn)(zccmd *cmd, void *user_data);

// CLIENT COMMANDS
void zui_client_init(zui_client_fn send, zui_server_fn recv, void *user_data);
void zui_client_push(zccmd *cmd);
void zui_client_render();

void zui_input_mousedown(u16 btn);
void zui_input_mouseup(u16 btn);
void zui_input_mousemove(zvec2 pos);
void zui_input_char(char c);

// SERVER COMMANDS
void zui_server(zui_server_fn send, zui_client_fn recv, void *user_data);
u32 zui_ms();

void zui_print_tree();

void zui_close();
void zui_blank();
void zui_box();
void zui_popup();
void zui_justify(u32 justification);
void zui_size(i32 w, i32 h);
void zui_font(zfont *font);
void zui_end();
void zui_window(i32 width, i32 height, float ts);
void zui_label(const char *text);
void zui_sliderf(char *tooltip, f32 min, f32 max, f32 *value);
void zui_slideri(char *tooltip, i32 min, i32 max, i32 *value);
i32  zui_combo(char *tooltip, char *csoptions, i32 *state);
bool zui_button(const char *text, u8 *state);
bool zui_check(u8 *state);
void zui_validator(bool(*validator)(char *text));
void zui_text(char *buffer, i32 len, zs_text *state);
void zui_textbox(char *buffer, i32 len, i32 *state);
void zui_col(i32 n, float *heights);
void zui_row(i32 n, float *widths);

#ifdef __cplusplus 
}
#endif

#endif
